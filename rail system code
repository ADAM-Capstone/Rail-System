//Control NEMA 17 stepper with Wii nunchuk
//Check resolution (full step, half step, etc) before running code

#include <Wire.h>
#include <ArduinoNunchuk.h>

#define BAUDRATE 19200

ArduinoNunchuk nunchuk = ArduinoNunchuk();

int X_value = 125;
int Y_value = 132;

// SCL is connected to A5
// SDA is connected to A4
// +3.3V connected to +
// GND connected to -

//Length NEMA
const int dirPinLength = 8;
const int stepPinLength = 9;

//Width NEMA
const int dirPinWidth = 12;
const int stepPinWidth = 11;

int spinDirectionLength = 1;
int spinDirectionWidth = 1;
long steps = 0;
long distance = 0;

void setup() {
  Serial.begin(BAUDRATE);
  nunchuk.init();

  distance = 10; //20mm for length, 10mm for width
  steps = distance * 50;
  
  pinMode (8, OUTPUT);
  pinMode (9, OUTPUT);

  pinMode (11, OUTPUT);
  pinMode (12, OUTPUT);
  
  digitalWrite(dirPinWidth, HIGH); //begin going forward
  digitalWrite(dirPinLength, HIGH); //begin going forward
}


void loop() {
  nunchuk.update();

  X_value = nunchuk.analogX;
  Y_value = nunchuk.analogY;
  
  if (X_value <= 75) { //Joystick left
    //delay(1000);
    digitalWrite(dirPinLength, LOW);
    takeStepsLength(steps);
    Serial.print("X BACKWARDS: ");
    Serial.println(nunchuk.analogX, DEC);
    //Serial.print(' ');
    delay(500);
    X_value = nunchuk.analogX;
    Y_value = nunchuk.analogY;
  }

  if (X_value >= 175) { //Joystick right
    //delay(1000);
    digitalWrite(dirPinLength, HIGH);
    takeStepsLength(steps);
    Serial.print("X FORWARD: ");
    Serial.println(nunchuk.analogX, DEC);
    //Serial.print(' ');
    delay(500);
    X_value = nunchuk.analogX;
    Y_value = nunchuk.analogY;
  }

  if (Y_value <= 80) { //Joystick down
    //delay(1000);
    digitalWrite(dirPinWidth, HIGH);
    takeStepsWidth(steps);
    Serial.print("Y FORWARD: ");
    Serial.println(nunchuk.analogY, DEC);
    //Serial.print(' ');
    delay(500);
    X_value = nunchuk.analogX;
    Y_value = nunchuk.analogY;
  }

  if (Y_value >= 180) { //Joystick up
    //delay(1000);
    digitalWrite(dirPinWidth, LOW);
    takeStepsWidth(steps);
    Serial.print("Y FORWARD: ");
    Serial.println(nunchuk.analogY, DEC);
    //Serial.print(' ');
    delay(500);
    X_value = nunchuk.analogX;
    Y_value = nunchuk.analogY;
  }

    Serial.print("X: ");
    Serial.print(nunchuk.analogX, DEC);
    Serial.print(' ');
    Serial.print("Y: ");  
    Serial.println(nunchuk.analogY, DEC);
    
}


void takeStepsLength(int n) {
    //Rotate "n" steps
  for(int x = 0; x < n; x++)
  {
    digitalWrite(stepPinLength, HIGH);
    delayMicroseconds(500);
    digitalWrite(stepPinLength, LOW);
    delayMicroseconds(500);
  }
}

void takeStepsWidth(int n) {
    //Rotate "n" steps
  for(int x = 0; x < n; x++)
  {
    digitalWrite(stepPinWidth, HIGH);
    delayMicroseconds(500);
    digitalWrite(stepPinWidth, LOW);
    delayMicroseconds(500);
  }
}

/*
void switchDirectionLength() {
  if (spinDirection == 1) { //forward
    spinDirection = 0;
    digitalWrite(dirPinLength, LOW);    
  }
  else if (spinDirection == 0){
    spinDirection = 1;
    digitalWrite(dirPinLength, HIGH); 
  }
}

void switchDirectionWidth() {
  if (spinDirection == 1) { //forward
    spinDirection = 0;
    digitalWrite(dirPinWidth, LOW);    
  }
  else if (spinDirection == 0){
    spinDirection = 1;
    digitalWrite(dirPinWidth, HIGH); 
  }
}
*/
